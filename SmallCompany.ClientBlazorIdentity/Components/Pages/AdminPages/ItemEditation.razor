@page "/itemEditation"

@attribute [Authorize];

@inject ITypeOfItemService typeOfItemService;
@inject IUnitService unitService;	
@inject IStockService stockService;
@inject IPropertyService propertyService;
@inject IItemService ItemService;
@inject IDateTypeService dateTypeService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer



@* @if (!UpdateMode){ *@
	<PageTitle>Item editation</PageTitle>

	<h1>Vytvoř skladovou položku</h1>
	<h5>Zvol skupinu a vyplň požadované vlastnosti. Všechny vlastnosti jsou volitelné. </h5>


	@if (!string.IsNullOrWhiteSpace(newItemNotification))
	{
		if (!string.IsNullOrWhiteSpace(newItemExceptionMsg))
		{
			<div class="alert alert-danger" role="alert">
				@newItemNotification <br>@newItemExceptionMsg
			</div>

		}
		else
		{
			<div class="alert alert-success" role="alert">
				@newItemNotification
			</div>
		}

	}

	<div>
		<EditForm Model="NewBlazorItem" OnValidSubmit="AddItemAsync" FormName="itemEditation">
			<DataAnnotationsValidator />
			<table class="table">
				<tr>
					<td>
						<InputSelect class="form-select" id="typeOfItem" @bind-Value="NewBlazorItem.TypeOfItemId">
							<option disabled selected value="0">Vyber druh položky</option>
							@foreach (var type in BlazorTypesOfItemInDb)
							{
								<option value="@type.Id">@type.Name</option>
							}
						</InputSelect>
						<ValidationMessage For="@( () => NewBlazorItem.TypeOfItemId)" />
					</td>
					<td>
						<InputText class="form-control" id="itemName" @bind-Value="NewBlazorItem.Name" placeholder="Název položky" />
						<ValidationMessage For="@( () => NewBlazorItem.Name)" />
					</td>
					<td>
						<InputSelect class="form-select" id="itemUnit" @bind-Value="NewBlazorItem.UnitId">
							<option disabled selected value="0">Vyber měrnou jednotku</option>

							@foreach (var unit in BlazorUnitsInDb)
							{
								<option value="@unit.Id">@unit.Name</option>
							}
						</InputSelect>
						<ValidationMessage For="@( () => NewBlazorItem.UnitId)" />
					</td>
				</tr>
			</table>

			@if (!string.IsNullOrWhiteSpace(NewBlazorItem.BlazorItemPropertiesValidationMessage))
			{
				<div class="text-danger">
					@NewBlazorItem.BlazorItemPropertiesValidationMessage
				</div>
			}


			@if (NewBlazorItem.BlazorItemProperties.Count != 0)
			{
				@foreach (var prop in NewBlazorItem.BlazorItemProperties)
				{
					<p>
						<label for="itemProperty">@prop.Name</label>
						<InputText class="form-control" id="itemProperty" @bind-Value="prop.Value"></InputText>					

					</p>
				}
			}
			<button Type="submit" class="btn btn-primary">Ulož záznam</button>
		</EditForm>
	</div>



	@if (BlazorItemsInDb.Count != 0) 
	{

		@foreach (var it in BlazorItemsInDb) 
		{
			string propertyName="";
			string properties = "";
			@foreach (var ipv in it.BlazorItemPropertyValues)
			{
				propertyName = ipv.BlazorProperty.Name;
				properties += $"{propertyName}: {ipv.Value}, ";
			}
			<div>
			<a href="#" class="btn-link" style="text-decoration: none; color: inherit" data-bs-toggle="modal" data-bs-target="#updateModal" 
			@onclick="()=>FillUpdateModal(it)">@it.Id, @it.BlazorTypeOfItem.Name, @it.Name, @it.BlazorUnit.Name, Aktivní:@it.IsActive, @properties</a>
			</div>
			

		}
	}
 @* } *@ 

<div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Úprava objektu: @ItemToUpdate.Id, @ItemToUpdate.Name</h5>
				<button type="button" class="btn-close" @onclick="CloseUpdateModal" data-bs-dismiss="modal" aria-label="Zavřít"></button>
			</div>
			<div class="modal-body">
				<EditForm Model="ItemToUpdate" OnValidSubmit="UpdateItemAsync" FormName="itemUpdate">
					<DataAnnotationsValidator />
					<ValidationSummary />

					<InputSelect class="form-select form-check-inline" id="typeOfItem" @bind-Value="ItemToUpdate.TypeOfItemId">
						@foreach (var type in BlazorTypesOfItemInDb)
						{
							<option value="@type.Id">@type.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="@( () => ItemToUpdate.TypeOfItemId)" />

					<InputText class="form-control form-check-inline" id="itemName" @bind-Value="ItemToUpdate.Name" placeholder="Název položky" />
					<ValidationMessage For="@( () => ItemToUpdate.Name)" />

					<InputSelect class="form-select form-check-inline" id="itemUnit" @bind-Value="ItemToUpdate.UnitId">

						@foreach (var unit in BlazorUnitsInDb)
						{
							<option value="@unit.Id">@unit.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="@( () => ItemToUpdate.UnitId)" />

					@if (!string.IsNullOrWhiteSpace(ItemToUpdate.BlazorItemUpdateValidationMessage))
					{
						<div class="text-danger">
							@ItemToUpdate.BlazorItemUpdateValidationMessage
						</div>
					}

					@foreach (var ipv in ItemToUpdate.BlazorItemPropertyValues)
					{
						<p>
							<label for="itemProperty">@ipv.BlazorProperty.Name</label>
							<InputText class="form-control" id="itemProperty" @bind-Value="ipv.Value"></InputText>
						</p>
					}

					<label class="form-check-label" for="isActive">Aktivní</label>
					<InputCheckbox class="form-check-inline" id="isActive" @bind-Value="ItemToUpdate.IsActive"></InputCheckbox>


					<button type="submit" class="btn btn-primary" @onclick="UpdateItemAsync">Uložit</button>
					<button type="button" class="btn btn-secondary" @onclick="CloseUpdateModal" data-bs-dismiss="modal">Zavřít</button>
				</EditForm>

				@if (!string.IsNullOrWhiteSpace(updateNotification))
				{
					if (!string.IsNullOrWhiteSpace(updateExceptionMsg))
					{
						<div class="alert alert-danger" role="alert">
							@updateNotification <br>@updateExceptionMsg
						</div>

					}
					else
					{
						<div class="alert alert-success" role="alert">
							@updateNotification
						</div>
					}

				}
			</div>
		</div>
	</div>
</div>

@* @if (UpdateMode) 
{
	<UpdatePage NavigationDataModel="NavigationDataModel" />
} *@

@code {
	//TODO - Stránka není Editací, ale vytvářením nové položky. Popřípadě, Vytvořením NEBO editací, protože 
	//součástí této komponenty je i editační komponenta UpdatePage.
	//NavigationDataModel je také adept na přejmenování, jedná se o položkový model.

	[SupplyParameterFromForm(Name = "itemEditation")]
	private BlazorItemNew NewBlazorItem { get; set; } = new BlazorItemNew();

	[SupplyParameterFromForm(Name = "itemUpdate")]
	private BlazorItemToUpdate ItemToUpdate { get; set; } = new BlazorItemToUpdate();

	private List<BlazorDateType> BlazorDateTypesIndDb { get; set; } = new List<BlazorDateType>();
	private List<BlazorUnit> BlazorUnitsInDb { get; set; } = new List<BlazorUnit>();
	private List<BlazorTypeOfItem> BlazorTypesOfItemInDb { get; set; } = new List<BlazorTypeOfItem>();
	private List<BlazorProperty> BlazorPropertiesInDb { get; set; } = new List<BlazorProperty>();

	private List<BlazorItemToUpdate> BlazorItemsInDb { get; set; } = new List<BlazorItemToUpdate>();

	// private NavigationDataModel NavigationDataModel { get; set; } = new();
	// public bool UpdateMode { get; set; } = false;

	BlazorItemNew existingBlazorItem = new BlazorItemNew();

	private string? notification;
	private string? exceptionMessage;

	private string? newItemNotification;
	private string? newItemExceptionMsg;

	private string? updateNotification;
	private string? updateExceptionMsg;

	protected override async Task OnInitializedAsync()
	{
		List<DateType> dateTypesInDb = new();
		List<TypeOfItem> typesOfItemsInDb = new();
		List<Unit> unitsInDb = new();
		List<Property> propertiesInDb = new();
		List<Item> itemsInDb = new();

		try
		{
			dateTypesInDb = await dateTypeService.GetDateTypesFromDaoAsync();
			NewBlazorItem.BlazorDateTypes = dateTypesInDb.Select(dt => DateTypeMapper.MapDateType(dt)).ToList();

			typesOfItemsInDb = await typeOfItemService.GetTypesOfItemsFromDaoAsync();			
			BlazorTypesOfItemInDb = typesOfItemsInDb.Select(type => TypeOfItemMapper.MapTypeOfItem(type)).OrderBy(type => type.Name).ToList();

			unitsInDb = await unitService.GetUnitsFromDaoAsync();
			BlazorUnitsInDb = unitsInDb.Select(unit => UnitMapper.MapUnit(unit)).OrderBy(unit => unit.Name).ToList();

			itemsInDb = await ItemService.GetItemsFromDaoAsync();
			BlazorItemsInDb = itemsInDb.Select(i => ItemToUpdateMapper.MapItemToUpdate(i)).ToList();

			propertiesInDb = await propertyService.GetPropertiesFromDaoAsync();
			BlazorPropertiesInDb = propertiesInDb.Select(prop => PropertyMapper.MapProperty(prop)).OrderBy(prop=>prop.Name).ToList();
			NewBlazorItem.BlazorItemProperties = propertiesInDb.Select(prop => PropertyMapper.MapProperty(prop)).OrderBy(prop => prop.Name).ToList();

		}
		catch(Exception ex)
		{
			newItemExceptionMsg = ex.Message;
			newItemNotification = "Nepodařilo se načíst podklady z databáze. ";
		}

	}


	private async Task AddItemAsync()
	{
		try
		{
			notification = "";
			exceptionMessage = "";
			existingBlazorItem = new();

			NewBlazorItem.IsActive = true;

			Item newItem = new Item();
			newItem = ItemMapper.MapItem(NewBlazorItem);


			await CheckItemDuplicityAsync(newItem);

			newItemNotification = notification;
			newItemExceptionMsg = exceptionMessage;

			if (existingBlazorItem.Id == 0)
			{
				await ItemService.AddItemWithPropertiesAsync(newItem);


				newItemNotification = "Vloženo.";
				StateHasChanged();
				await Task.Delay(1300);

				RefreshPage();

			}

		}
		catch (Exception ex)
		{
			newItemExceptionMsg = ex.Message;
			newItemNotification = "Záznam se nepodařilo uložit ";
			StateHasChanged();
		}

	}

	private async Task UpdateItemAsync()
	{
		if (string.IsNullOrEmpty(ItemToUpdate.Name))
		{
			return;
		}

		try
		{
			notification = "";
			exceptionMessage = "";
			existingBlazorItem = new();

			Item itemToUpdate = ItemToUpdateMapper.MapItemToUpdate(ItemToUpdate);

			await CheckItemDuplicityAsync(itemToUpdate);

			updateNotification = notification;
			updateExceptionMsg = exceptionMessage;

			if (existingBlazorItem.Id == 0)
			{
				await ItemService.UpdateItemAsync(itemToUpdate);

				updateNotification = "Záznam byl upraven";

				StateHasChanged();
				await Task.Delay(1300);


				RefreshPage();

			}

		}
		catch (Exception ex)
		{
			updateNotification = "Záznam se nepodařilo upravit.";
			updateExceptionMsg = ex.Message;
		}


	}


	// private void NavigateToUpdatePage(BlazorItemToUpdate blazorItem)
	// {
	// 	NavigationDataModel.SharedBlazorItem = blazorItem;
	// 	NavigationDataModel.BlazorUnitsInDb = BlazorUnitsInDb;
	// 	NavigationDataModel.BlazorTypesOfItemInDb = BlazorTypesOfItemInDb;

	// 	UpdateMode = true;
	// }

	private void FillUpdateModal(BlazorItemToUpdate blazorItem)
	{
		ItemToUpdate = ObjectDeepCoppier.MakeDeepCopy(blazorItem);
	}

	private void CloseUpdateModal()
	{
		ItemToUpdate = new();
	}


	private async Task CheckItemDuplicityAsync(Item item)
	{
		Item? existingItem = await ItemService.CheckItemDuplicityAsync(item);

		notification = "";

		if(existingItem != null)
		{
			existingBlazorItem = ItemMapper.MapItem(existingItem);

			notification = $"Tento záznam již existuje: Id {existingBlazorItem.Id}.. Název {existingBlazorItem.Name}";
			exceptionMessage = "Parametry můžete upravit a opět zkusit uložit .";
		}
	}

	
	private void RefreshPage()
	{
		navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
	}

}
