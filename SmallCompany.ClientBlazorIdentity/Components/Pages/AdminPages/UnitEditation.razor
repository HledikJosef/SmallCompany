@page "/unitEditation"
@attribute [Authorize];

@inject IUnitService unitService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer


<h1>Editace jednotek skladovaných položek.</h1>
<h5>Zde můžete vytvořit záznam měrné jednotky (např.milimetr, litr, kilogram, atd.). Tyto jednotky se používají při uskladnění jakékoli položky na sklad.</h5>

@if (!string.IsNullOrWhiteSpace(notification))
{
    if (!string.IsNullOrWhiteSpace(exceptionMessage))
    {
        <div class="alert alert-danger" role="alert">
            @notification: <br>@exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}

<div>
    <EditForm Model="NewBlazorUnit" OnValidSubmit="AddUnitAsync" FormName="unitEditation">
        <DataAnnotationsValidator />
        <table class="table">
            <tbody>
                <tr>
                    <InputText class="form-control" @bind-Value="NewBlazorUnit.Name" id="unitName" placeholder="Název jednotky" />
                    <ValidationMessage For="@(() => NewBlazorUnit.Name)"></ValidationMessage>

                </tr>

            </tbody>
        </table>

        <button type="submit" class="btn btn-primary">Ulož záznam</button>

    </EditForm>
</div>



<h5 class="mt-5">Níže je vypsán seznam všech již vytvořených měrných jednotek.</h5>

@foreach(var unit in blazorUnitsInDb)
{    
    <button class="btn btn-outline-primary" title="Upravit záznam" @onclick="()=>PrepareUpdateForm(unit)">@unit.Name, aktivní:@unit.IsActive</button>    
}



@if(!string.IsNullOrEmpty(BlazorUnitToUpdate.Name))
{
    <div class="mt-2">
        <EditForm class="form-control" Model="BlazorUnitToUpdate" OnValidSubmit="UpdateUnit" FormName="unitUpdate">
            <DataAnnotationsValidator />
            <InputText class="form-control form-check-inline" @bind-Value="BlazorUnitToUpdate.Name" style="width: 30%" id="unitName" placeholder="Název jednotky" />
            <ValidationMessage For="@(() => BlazorUnitToUpdate.Name)"></ValidationMessage>
            <label class="form-check-label" for="IsActive">Aktivní</label>
            <InputCheckbox class="form-check form-check-inline" id="IsActive" @bind-Value="BlazorUnitToUpdate.IsActive"></InputCheckbox>

            <button type="submit" class="btn btn-warning">Ulož záznam</button>

        </EditForm>
    </div>
    

}


@code {
    [SupplyParameterFromForm]
    private BlazorUnit NewBlazorUnit { get; set; } = new BlazorUnit();

    private BlazorUnit BlazorUnitToUpdate { get; set; } = new();

    private List<BlazorUnit> blazorUnitsInDb = new List<BlazorUnit>();    
    private string? notification;
    private string? exceptionMessage;


    protected override async Task OnInitializedAsync()
    {
        List<Unit> unitsInDb = new List<Unit>();

        try
        {
            unitsInDb = await unitService.GetUnitsFromDaoAsync();
            blazorUnitsInDb = unitsInDb.Select(unit => UnitMapper.MapUnit(unit)).OrderBy(unit=> unit.Name).ToList();

        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o měrných jednotkách z databáze. ";
        }

    }

    private async Task AddUnitAsync()
    {
        if (string.IsNullOrEmpty(NewBlazorUnit.Name))
        {
            throw new InvalidOperationException();
        }
        try
        {
            NewBlazorUnit.IsActive = true;
            Unit newUnit = UnitMapper.MapUnit(NewBlazorUnit);

            await unitService.AddUnitAsync(newUnit);

            notification = "Vloženo ";
            StateHasChanged();
            await Task.Delay(1300);

            RefreshPage();
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";
        }

    }

    private void PrepareUpdateForm(BlazorUnit unit)
    {
        BlazorUnitToUpdate = unit.CopyUnit();
    }

    private async Task UpdateUnit()
    {
        if(string.IsNullOrEmpty(BlazorUnitToUpdate.Name))
        {
            return;
        }

        try 
        {
            Unit uniToUpdate = UnitMapper.MapUnit(BlazorUnitToUpdate);

            await unitService.UpdateUnitAsync(uniToUpdate);

            notification = "Záznam byl změněn";
            StateHasChanged();
            await Task.Delay(1300);

            RefreshPage();

        }
        catch(Exception ex)
        {
            notification = "Záznam se nepodařilo upravit";
            exceptionMessage = ex.Message;
        }

    }



    private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri,true);
    }
}
