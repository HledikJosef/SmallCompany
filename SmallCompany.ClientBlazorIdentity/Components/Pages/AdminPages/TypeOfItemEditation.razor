@page "/typeOfItemEditation"

@attribute [Authorize];

@inject ITypeOfItemService typeOfItemService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer


<PageTitle>TypeOfItem editation</PageTitle>

<h1>Editace typů skladových položek.</h1>
<h5>Zde můžete vytvořit záznam typu skladové položky jako např.: materiál, polotovar, výrobek, služba atd.</h5>

@if (!string.IsNullOrWhiteSpace(notification))
{
    if (!string.IsNullOrWhiteSpace(exceptionMessage))
    {
        <div class="alert alert-danger" role="alert">
            @notification: <br>@exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}

<div>
    <EditForm Model="NewBlazorTypeOfItem" OnValidSubmit="AddTypeOfItemAsync" FormName="typeOfItemEditation">
        <DataAnnotationsValidator />
        <table class="table">
            <tbody>
                <tr>
                    <InputText class="form-control" @bind-Value="NewBlazorTypeOfItem.Name" id="typeOfItemName" placeholder="Název typu" />
                    <ValidationMessage For="@(() => NewBlazorTypeOfItem.Name)" />

                </tr>

            </tbody>
        </table>

        <button type="submit" class="btn btn-primary">Ulož záznam</button>

    </EditForm>
</div>

<hr class="my-4" style="visibility: hidden">
<h5>Níže je vypsán seznam všech již vytvořených typů položek.</h5>

@foreach(var type in blazorTypesOfItemsInDb)
{
    <button class="btn btn-outline-primary" title="Upravit záznam" @onclick="()=>PrepareUpdateForm(type)">@type.Name , aktivní:@type.IsActive</button> 
}

<hr class="my-1" style="visibility: hidden">

@if(!string.IsNullOrEmpty(BlazorTypeOfItemToUpdate.Name))
{
    <div>
        <EditForm class="form-control" Model="BlazorTypeOfItemToUpdate" OnValidSubmit="UpdateTypeOfItem" FormName="typeOfItemUpdate">
            <DataAnnotationsValidator />

            <InputText class="form-control form-check-inline" @bind-Value="BlazorTypeOfItemToUpdate.Name" style="width: 20%" id="typeOfItemName" placeholder="Název typu" />
            <ValidationMessage For="@(() => BlazorTypeOfItemToUpdate.Name)" />
            <label class="form-check-label" for="IsActive">Aktivní</label>
            <InputCheckbox class="form-check form-check-inline" id="IsActive" @bind-Value="BlazorTypeOfItemToUpdate.IsActive"></InputCheckbox>

            <button type="submit" class="btn btn-warning">Ulož záznam</button>

        </EditForm>
    </div>
    

}




@code {
    [SupplyParameterFromForm]
    BlazorTypeOfItem NewBlazorTypeOfItem { get; set; } = new();

    BlazorTypeOfItem BlazorTypeOfItemToUpdate { get; set; } = new();

    private List<BlazorTypeOfItem> blazorTypesOfItemsInDb = new();
    private string? notification;
    private string? exceptionMessage;

    protected override async Task OnInitializedAsync()
    {
        List<TypeOfItem> typesOfItemsInDb = new();

        try
        {
            typesOfItemsInDb = await typeOfItemService.GetTypesOfItemsFromDaoAsync();
            blazorTypesOfItemsInDb = typesOfItemsInDb.Select(type => TypeOfItemMapper.MapTypeOfItem(type)).OrderBy( type => type.Name).ToList();
        }
        catch(Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o měrných jednotkách z databáze. ";            
        }
    }

    private async Task AddTypeOfItemAsync()
    {
        if (string.IsNullOrEmpty(NewBlazorTypeOfItem.Name))
        {
            throw new InvalidOperationException();
        }
        try
        {
            NewBlazorTypeOfItem.IsActive = true;
            TypeOfItem newTypeOfItem = new TypeOfItem();
            newTypeOfItem = TypeOfItemMapper.MapTypeOfItem(NewBlazorTypeOfItem);

            await typeOfItemService.AddTypeOfItemAsync(newTypeOfItem);

            notification = "Vloženo";
            StateHasChanged();
            await Task.Delay(1300);

            RefreshPage();
        }
        catch(Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";            
        }

    }

    private void PrepareUpdateForm(BlazorTypeOfItem blazorTypeOfItem)
    {
        BlazorTypeOfItemToUpdate = blazorTypeOfItem.CopyTypeOfItem();
    }

    private async Task UpdateTypeOfItem()
    {
        if(string.IsNullOrEmpty(BlazorTypeOfItemToUpdate.Name))
        {
            return;
        }

        try 
        {
            TypeOfItem typeOfItemToUpdate = TypeOfItemMapper.MapTypeOfItem(BlazorTypeOfItemToUpdate);

            await typeOfItemService.UpdateTypeOfItemAsync(typeOfItemToUpdate);

            notification = "Záznam byl upraven";
            StateHasChanged();
            await Task.Delay(1300);

            RefreshPage();

        }
        catch(Exception ex)
        {
            notification = "Záznam se nepodařilo upravit";
            exceptionMessage = ex.Message;
        }
    }

    private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }
}
