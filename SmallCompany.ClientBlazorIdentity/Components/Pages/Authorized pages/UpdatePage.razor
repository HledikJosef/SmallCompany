@page "/updatePage"

@inject NavigationManager navigationManager
@inject IItemService ItemService

@rendermode InteractiveServer


<h3>Úprava skladové položky</h3>
<h5>Zde můžete upravit záznam skladové položky.</h5>


@if (NavigationDataModel.SharedBlazorItem.Id != 0)
{
	string propertyName = "";
	string properties = "";
	@foreach (var ipv in NavigationDataModel.SharedBlazorItem.BlazorItemPropertyValues)
	{
		propertyName = ipv.BlazorProperty.Name;
		properties += $"{propertyName}: {ipv.Value}, ";
	}
	<button class="btn btn-outline-primary">@NavigationDataModel.SharedBlazorItem.Id, 
		@NavigationDataModel.SharedBlazorItem.BlazorTypeOfItem.Name,
		@NavigationDataModel.SharedBlazorItem.Name,
		@NavigationDataModel.SharedBlazorItem.BlazorUnit.Name, 
		Aktivní:@NavigationDataModel.SharedBlazorItem.IsActive, 
		@properties
	</button>

}

@if (!string.IsNullOrWhiteSpace(notification))
{
	if (!string.IsNullOrWhiteSpace(exceptionMessage))
	{
		<div class="alert alert-danger" role="alert">
			@notification <br>@exceptionMessage
		</div>

	}
	else
	{
		<div class="alert alert-success" role="alert">
			@notification
		</div>
	}

}

@if (BlazorItemToUpdate.Id > 0)
{
	<div>
		<EditForm class="form-control" Model="BlazorItemToUpdate" OnValidSubmit="UpdateItemAsync" FormName="itemUpdate">
			<DataAnnotationsValidator />
			<InputSelect class="form-select form-check-inline" style="width: 30%" id="typeOfItem" @bind-Value="BlazorItemToUpdate.TypeOfItemId">
				<option disabled selected value="0">Vyber druh položky</option>
				@foreach (var type in NavigationDataModel.BlazorTypesOfItemInDb)
				{
					<option value="@type.Id">@type.Name</option>
				}
			</InputSelect>
			<ValidationMessage For="@( () => BlazorItemToUpdate.TypeOfItemId)" />

			<InputText class="form-control form-check-inline" style="width: 30%" id="itemName" @bind-Value="BlazorItemToUpdate.Name" placeholder="Název položky" />
			<ValidationMessage For="@( () => BlazorItemToUpdate.Name)" />

			<InputSelect class="form-select form-check-inline" style="width: 30%" id="itemUnit" @bind-Value="BlazorItemToUpdate.UnitId">
				<option disabled selected value="0">Vyber měrnou jednotku</option>

				@foreach (var unit in NavigationDataModel.BlazorUnitsInDb)
				{
					<option value="@unit.Id">@unit.Name</option>
				}
			</InputSelect>
			<ValidationMessage For="@( () => BlazorItemToUpdate.UnitId)" />

			@if (!string.IsNullOrWhiteSpace(BlazorItemToUpdate.BlazorItemUpdateValidationMessage))
			{
				<div class="text-danger">
					@BlazorItemToUpdate.BlazorItemUpdateValidationMessage
				</div>
			}


			@foreach (var ipv in BlazorItemToUpdate.BlazorItemPropertyValues)
			{
				<p>
					<label for="itemProperty">@ipv.BlazorProperty.Name</label>
					<InputText class="form-control" style="width: 30%" id="itemProperty" @bind-Value="ipv.Value"></InputText>
				</p>
			}


			<label class="form-check-label" for="isActive">Aktivní</label>
			<InputCheckbox class="form-check-inline" id="isActive" @bind-Value="BlazorItemToUpdate.IsActive"></InputCheckbox>

			<button type="submit" class="btn btn-warning">Uprav záznam</button>
			<button type="button" class="btn btn-outline-secondary" @onclick="RefreshPage" >Zpět</button>

		</EditForm>

	</div>


}



@code {
	[Parameter]
	public NavigationDataModel? NavigationDataModel { get; set; }

	[SupplyParameterFromForm]
	private BlazorItemToUpdate BlazorItemToUpdate { get; set; } = new BlazorItemToUpdate();

	private BlazorItemNew? existingUpdateItem;

	string? notification;
	string? exceptionMessage;

	protected override void OnInitialized()
	{
		BlazorItemToUpdate = ItemToUpdateMapper.MapItemToUpdate(NavigationDataModel.SharedBlazorItem);
	}

	private async Task UpdateItemAsync()
	{
		if (string.IsNullOrEmpty(BlazorItemToUpdate.Name))
		{
			return;
		}

		try
		{
			existingUpdateItem = new();

			Item itemToUpdate = ItemToUpdateMapper.MapItemToUpdate(BlazorItemToUpdate);

			await CheckItemDuplicityAsync(itemToUpdate);

			if (existingUpdateItem.Id == 0)
			{
				await ItemService.UpdateItemAsync(itemToUpdate);

				notification = "Záznam byl upraven";
				StateHasChanged();
				await Task.Delay(1300);


				navigationManager.NavigateTo("/itemEditation");

			}


		}
		catch (Exception ex)
		{
			notification = "Záznam se nepodařilo upravit.";
			exceptionMessage = ex.Message;
		}


	}


	private async Task CheckItemDuplicityAsync(Item item)
	{
		Item? existingItem = await ItemService.CheckItemDuplicityAsync(item);

		notification = "";

		if (existingItem != null)
		{
			existingUpdateItem = ItemMapper.MapItem(existingItem);

			notification = $"Tento záznam již existuje: {existingUpdateItem.Id}.. {existingUpdateItem.Name}";
			exceptionMessage = "Parametry můžete upravit a opět zkusit uložit .";
		}

	}

	private void RefreshPage()
	{
		navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
	}

}
