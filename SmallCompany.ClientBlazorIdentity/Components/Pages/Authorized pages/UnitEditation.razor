@page "/unitEditation"
@attribute [Authorize];

@inject IUnitService unitService;
@inject NavigationManager navigationManager;

<PageTitle>Item-record</PageTitle>


<h1>Editace jednotek skladovaných položek.</h1>
<h5>Zde můžete vytvořit záznam měrné jednotky (např.milimetr, litr, kilogram, atd.). Tyto jednotky se používají při uskladnění jakékoli položky na sklad.</h5>

<EditForm Model="NewBlazorUnit" OnValidSubmit="AddUnit" FormName="unitEditation">
    <table class="table">
        <tbody>
            <tr>
                <td>
                    <InputText class="form-select" @bind-Value="NewBlazorUnit.Name" id="unitName" />
                </td>

            </tr>
            
        </tbody>
    </table>

    <button type="submit" class="btn btn-primary">Ulož záznam</button>

</EditForm>

<hr class="my-4">
<h5>Níže je vypsán seznam všech již vytvořených měrných jednotek.</h5>
<table class"table">
    <tbody>
        @foreach(var unit in blazorUnitsInDb)
        {
            <tr>
                @unit.Name;
            </tr>
        }
    </tbody>
</table>



@if (notification != null)
{
    if (exceptionMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @notification: @exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}





@code {
    [SupplyParameterFromForm]
    private BlazorUnit NewBlazorUnit { get; set; } = new BlazorUnit();

    private List<BlazorUnit> blazorUnitsInDb = new List<BlazorUnit>();    
    private string? notification;
    private string? exceptionMessage;


    protected override async Task OnInitializedAsync()
    {
        NewBlazorUnit = new BlazorUnit();
        List<ServiceUnit> serviceUnitsInDb = new List<ServiceUnit>();

        try
        {
            serviceUnitsInDb = await unitService.GetUnitsFromDao();
            blazorUnitsInDb = serviceUnitsInDb.Select(serviceUnit => UnitMapper.MapServiceBlazorUnit(serviceUnit)).ToList();

        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o měrných jednotkách z databáze. ";
        }

    }

    private async Task AddUnit()
    {
        if (NewBlazorUnit is null)
        {
            throw new InvalidOperationException();
        }
        try
        {  
            if(NewBlazorUnit is null)
            {
                throw new InvalidOperationException();
            }
            ServiceUnit serviceUnit = new ServiceUnit();
            serviceUnit = UnitMapper.MapBlazorServiceUnit(NewBlazorUnit);

            await unitService.AddUnit(serviceUnit);

            notification = "Vloženo ";
            await Task.Delay(1300);
            RefreshPage();
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";
        }

    }

    private void RefreshPage()
    {
        navigationManager.NavigateTo("/itemModelRecord", forceLoad: true);
    }
}
