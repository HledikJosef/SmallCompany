@page "/unitEditation"
@attribute [Authorize];

@inject IUnitService unitService;
@inject NavigationManager navigationManager;


<h1>Editace jednotek skladovaných položek.</h1>
<h5>Zde můžete vytvořit záznam měrné jednotky (např.milimetr, litr, kilogram, atd.). Tyto jednotky se používají při uskladnění jakékoli položky na sklad.</h5>

<EditForm Model="NewBlazorUnit" OnValidSubmit="AddUnit" FormName="unitEditation">
    <DataAnnotationsValidator />    
    <table class="table">
        <tbody>
            <tr>
                <td>
                    <InputText class="form-text" @bind-Value="NewBlazorUnit.Name" id="unitName" placeholder="Název jednotky" />
                    <ValidationMessage For="@(() => NewBlazorUnit.Name)"></ValidationMessage>
                </td>

            </tr>
            
        </tbody>
    </table>

    <button type="submit" class="btn btn-primary">Ulož záznam</button>

</EditForm>

<hr class="my-4">
<h5>Níže je vypsán seznam všech již vytvořených měrných jednotek.</h5>

        @foreach(var unit in blazorUnitsInDb)
        {
            <button class="btn btn-outline-primary">
                @unit.Name              
            </button>
        }




@if (notification != null)
{
    if (exceptionMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @notification: @exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}





@code {
    [SupplyParameterFromForm]
    private BlazorUnit NewBlazorUnit { get; set; } = new BlazorUnit();

    private List<BlazorUnit> blazorUnitsInDb = new List<BlazorUnit>();    
    private string? notification;
    private string? exceptionMessage;


    protected override async Task OnInitializedAsync()
    {
        List<ServiceUnit> serviceUnitsInDb = new List<ServiceUnit>();

        try
        {
            serviceUnitsInDb = await unitService.GetUnitsFromDao();
            blazorUnitsInDb = serviceUnitsInDb.Select(serviceUnit => UnitMapper.MapServiceBlazorUnit(serviceUnit)).OrderBy(unit=> unit.Name).ToList();

        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o měrných jednotkách z databáze. ";
        }

    }

    private async Task AddUnit()
    {
        if (string.IsNullOrEmpty(NewBlazorUnit.Name))
        {
            throw new InvalidOperationException();
        }
        try
        {
            ServiceUnit serviceUnit = new ServiceUnit();
            serviceUnit = UnitMapper.MapBlazorServiceUnit(NewBlazorUnit);

            await unitService.AddUnit(serviceUnit);

            notification = "Vloženo ";
            await Task.Delay(1300);
            
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";
        }

        RefreshPage();

    }

    private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri,true);
    }
}
