@page "/unitEditation"
@attribute [Authorize];

@inject IUnitService unitService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer


<h1>Editace jednotek skladovaných položek.</h1>
<h5>Zde můžete vytvořit záznam měrné jednotky (např.milimetr, litr, kilogram, atd.). Tyto jednotky se používají při uskladnění jakékoli položky na sklad.</h5>

@if (notification != null)
{
    if (exceptionMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @notification: @exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}

<EditForm Model="NewBlazorUnit" OnValidSubmit="AddUnitAsync" FormName="unitEditation">
    <DataAnnotationsValidator />    
    <table class="table">
        <tbody>
            <tr>                
                <InputText class="form-control" @bind-Value="NewBlazorUnit.Name" id="unitName" placeholder="Název jednotky" />
                <ValidationMessage For="@(() => NewBlazorUnit.Name)"></ValidationMessage>      

            </tr>

        </tbody>
    </table>

    <button type="submit" class="btn btn-primary">Ulož záznam</button>

</EditForm>

<hr class="my-4">
<h5>Níže je vypsán seznam všech již vytvořených měrných jednotek.</h5>

@foreach(var unit in blazorUnitsInDb)
{    
    <p class="btn btn-outline-primary">@unit.Name</p>    
}


@code {
    [SupplyParameterFromForm]
    private BlazorUnit NewBlazorUnit { get; set; } = new BlazorUnit();

    private List<BlazorUnit> blazorUnitsInDb = new List<BlazorUnit>();    
    private string? notification;
    private string? exceptionMessage;


    protected override async Task OnInitializedAsync()
    {
        List<Unit> unitsInDb = new List<Unit>();

        try
        {
            unitsInDb = await unitService.GetUnitsFromDaoAsync();
            blazorUnitsInDb = unitsInDb.Select(unit => UnitMapper.MapUnit(unit)).OrderBy(unit=> unit.Name).ToList();

        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o měrných jednotkách z databáze. ";
        }

    }

    private async Task AddUnitAsync()
    {
        if (string.IsNullOrEmpty(NewBlazorUnit.Name))
        {
            throw new InvalidOperationException();
        }
        try
        {
            Unit newUnit = new Unit();
            newUnit = UnitMapper.MapUnit(NewBlazorUnit);

            await unitService.AddUnitAsync(newUnit);

            notification = "Vloženo ";
            StateHasChanged();
            await Task.Delay(1300);
            
            RefreshPage();
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";
        }

    }

    private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri,true);
    }
}
