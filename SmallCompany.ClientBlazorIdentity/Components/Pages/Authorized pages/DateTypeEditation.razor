@page "/DateTypeEditation"

@attribute [Authorize];

@inject IDateTypeService dateTypeService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer

<PageTitle>DateType editation</PageTitle>

<h1>Editace datového typu vlastnosti.</h1>
<h5>Zde můžete vytvořit záznam datového typu vlastnosti, jako např.: string (text), float (číslo) atd.</h5>

@if (notification != null)
{
    if (exceptionMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @notification: @exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}

<EditForm Model="NewBlazorDateType" OnValidSubmit="AddDateTypeAsync" FormName="dateTypeEditation">
    <DataAnnotationsValidator />
    <table class="table">
        <tbody>
            <tr>
                <InputText class="form-control" @bind-Value="NewBlazorDateType.Name" id="typeOfItemName" placeholder="Název datového typu" />
                <ValidationMessage For="@(() => NewBlazorDateType.Name)" />

            </tr>

        </tbody>
    </table>

    <button type="submit" class="btn btn-primary">Ulož záznam</button>

</EditForm>

<hr class="my-4">
<h5>Níže je vypsán seznam všech již vytvořených typů položek.</h5>

@foreach (var type in blazorDateTypesInDb)
{
    <p class="btn btn-outline-primary">@type.Name</p>  
}



@code {
    [SupplyParameterFromForm]
    BlazorDateType NewBlazorDateType { get; set; } = new BlazorDateType();

    private List<BlazorDateType> blazorDateTypesInDb = new List<BlazorDateType>();
    private string? notification;
    private string? exceptionMessage;

    protected override async Task OnInitializedAsync()
    {
        List<ServiceDateType> serviceDateTypesInDb = new List<ServiceDateType>();
        try
        {
            serviceDateTypesInDb = await dateTypeService.GetDateTypesFromDaoAsync();
            blazorDateTypesInDb = serviceDateTypesInDb.Select(type => DateTypeMapper.MapServiceBlazorDateType(type)).OrderBy(type => type.Name).ToList();

        }
        catch(Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o měrných jednotkách z databáze. ";
        }

    }

    private async Task AddDateTypeAsync()
    {
        if (string.IsNullOrEmpty(NewBlazorDateType.Name))
        {
            return;
        }

        try
        {
            ServiceDateType serviceDateType = new ServiceDateType();
            serviceDateType = DateTypeMapper.MapBlazorServiceDateType(NewBlazorDateType);

            await dateTypeService.AddDateTypeAsync(serviceDateType);

            notification = "Vloženo";
            StateHasChanged();
            await Task.Delay(1300);
            

            RefreshPage();

        }
        catch(Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";
        }

        

    }

    private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }




}
