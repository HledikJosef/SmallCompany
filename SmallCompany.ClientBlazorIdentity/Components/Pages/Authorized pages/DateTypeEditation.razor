@page "/DateTypeEditation"

@attribute [Authorize];

@inject IDateTypeService dateTypeService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer

<PageTitle>DateType editation</PageTitle>

<h1>Editace datového typu vlastnosti.</h1>
<h5>Zde můžete vytvořit záznam datového typu vlastnosti, jako např.: string (text), float (číslo) atd.</h5>

@if (!string.IsNullOrWhiteSpace(notification))
{
    if (!string.IsNullOrWhiteSpace(exceptionMessage))
    {
        <div class="alert alert-danger" role="alert">
            @notification: <br>@exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}
<div>
    <EditForm Model="NewBlazorDateType" OnValidSubmit="AddDateTypeAsync" FormName="dateTypeEditation">
        <DataAnnotationsValidator />
        <table class="table">
            <tbody>
                <tr>
                    <InputText class="form-control" @bind-Value="NewBlazorDateType.Name" id="typeOfItemName" placeholder="Název datového typu" />
                    <ValidationMessage For="@(() => NewBlazorDateType.Name)" />

                </tr>

            </tbody>
        </table>

        <button type="submit" class="btn btn-primary">Ulož záznam</button>

    </EditForm>
</div>


<hr class="my-4" style="visibility: hidden">
<h5>Níže je vypsán seznam všech již vytvořených typů položek.</h5>

@foreach (var type in blazorDateTypesInDb)
{
    <button class="btn btn-outline-primary" title="Upravit záznam" @onclick="()=>PrepareUpdateForm(type)" >@type.Name   -aktivní prvek: @type.IsActive</button> 
}

<hr class="my-1" style="visibility: hidden">

@if(!string.IsNullOrEmpty(BlazorDateTypeToUpdate.Name))
{
    <div>
        <EditForm class="form-control" Model="BlazorDateTypeToUpdate" OnValidSubmit="UpdateDateTypeAsync" FormName="dateTypeUpdate">
            <DataAnnotationsValidator />
            <div>
                <InputText class="form-control form-check-inline" style="width: 20%" @bind-Value="BlazorDateTypeToUpdate.Name" id="dateTypeNameUpdate" width="50%"></InputText>
                <ValidationMessage For="@(() => BlazorDateTypeToUpdate.Name)" />
                <label class="form-check-label" for="isActive">Aktivní</label>
                <InputCheckbox class="form-check form-check-inline" @bind-Value="BlazorDateTypeToUpdate.IsActive" id="isActive"></InputCheckbox>

            </div>

            <button type="submit" class="btn btn-warning">Uprav záznam</button>
        </EditForm>

    </div>

}



@code {
    [SupplyParameterFromForm]
    BlazorDateType NewBlazorDateType { get; set; } = new BlazorDateType();
    BlazorDateType BlazorDateTypeToUpdate { get; set; } = new BlazorDateType();

    private List<BlazorDateType> blazorDateTypesInDb = new List<BlazorDateType>();
    private BlazorDateType existingBlazorDateType = new();
    private string? notification;
    private string? exceptionMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            List<DateType> dateTypesInDb = await dateTypeService.GetDateTypesFromDaoAsync();
            blazorDateTypesInDb = dateTypesInDb.Select(type => DateTypeMapper.MapDateType(type)).OrderBy(type => type.Name).ToList();

        }
        catch(Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o měrných jednotkách z databáze. ";
        }

    }


    private async Task AddDateTypeAsync()
    {
        if (string.IsNullOrEmpty(NewBlazorDateType.Name))
        {
            return;
        }

        try
        {
            notification = "";
            exceptionMessage = "";
            existingBlazorDateType = new();

            NewBlazorDateType.IsActive = true;
            DateType dateType = new ();
            dateType = DateTypeMapper.MapDateType(NewBlazorDateType);

            await CheckDuplicityAsync(dateType);

            if(existingBlazorDateType.Id == 0)
            {
                await dateTypeService.AddDateTypeAsync(dateType);

                notification = "Vloženo";
                StateHasChanged();
                await Task.Delay(1300);


                RefreshPage();
            }
            

        }
        catch(Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";
        }



    }


    private async Task CheckDuplicityAsync(DateType dateType) 
    {        
        DateType? existingDateType = await dateTypeService.CheckDateTypeDuplicityAsync(dateType);        

        if(existingDateType != null)
        {
            existingBlazorDateType = DateTypeMapper.MapDateType(existingDateType);

            notification = $"Tento záznam již existuje: Id{existingBlazorDateType.Id}.. {existingBlazorDateType.Name}";
            exceptionMessage = "Parametry můžete upravit a opět zkusit uložit .";
        }
        
    }


    private void PrepareUpdateForm(BlazorDateType type)
    {
        BlazorDateTypeToUpdate =  type.CopyBlazorDateType();
    }

    private async Task UpdateDateTypeAsync()
    {
        if(string.IsNullOrEmpty(BlazorDateTypeToUpdate.Name))
        {
            return;
        }
        try 
        {
            DateType dateTypeToUpdate = DateTypeMapper.MapDateType(BlazorDateTypeToUpdate);

            await dateTypeService.UpdateDateTypeAsync(dateTypeToUpdate);

            notification = "Záznam byl upraven";
            StateHasChanged();
            await Task.Delay(1300);


            RefreshPage();
        }
        catch (Exception ex) 
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo upravit.";
        } 

    }    
    

    private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }


}
