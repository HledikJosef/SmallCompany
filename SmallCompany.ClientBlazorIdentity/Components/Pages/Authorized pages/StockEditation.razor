@page "/stockEditation"

@attribute [Authorize];

@inject IStockService stockService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer


<PageTitle>Stock editation</PageTitle>

<h1>Vytvoř nový sklad</h1>
<h5>Vyplň název skladu, stručný popis a lokaci.</h5>

@if (notification != null)
{
    if (exceptionMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @notification: @exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}

<div>
    <EditForm Model="NewBlazorStock" OnValidSubmit="AddStockAsync" FormName="StockEditation">
        <DataAnnotationsValidator />
        <table class="table">
            <tbody>
                <tr>
                    <InputText @bind-Value="NewBlazorStock.Name" class="form-control" style="width: 20%" placeholder="Název skladu" id="title" />
                    <ValidationMessage For="@( () => NewBlazorStock.Name)" />
                </tr>
                <tr>
                    <InputText @bind-Value="NewBlazorStock.Location" class="form-control" style="width: 20%" placeholder="Lokace skladu" id="location" />
                    <ValidationMessage For="@( () => NewBlazorStock.Location)" />
                </tr>
                <tr>
                    <InputText @bind-Value="NewBlazorStock.Description" class="form-control" style="width: 20%" placeholder="Stručný popis skladu" id="description" />
                    <ValidationMessage For="@( () => NewBlazorStock.Description)" />
                </tr>
            </tbody>
        </table>

        <button type="submit" class="btn btn-primary">Ulož záznam</button>

    </EditForm>
</div>


<hr class="my-4" style="visibility: hidden">
<h5>Níže je vypsán seznam všech již vytvořených skladů.</h5>


@foreach (var stock in blazorStocksInDb)
{
    <div>
        <button class="btn btn-outline-primary" title="Upravit záznam" @onclick="()=>PrepareUpdateForm(stock)">@stock.Name,  @stock.Location,  @stock.Description, aktivní:@stock.IsActive</button>
    </div>
}

<hr class="my-1" style="visibility: hidden">

@if(!string.IsNullOrEmpty(BlazorStockToUpdate.Name))
{
    <div>
        <EditForm class="form-control" Model="BlazorStockToUpdate" OnValidSubmit="UpdateStockAsync" FormName="stockUpdate">
            <DataAnnotationsValidator />
            <div>
                <InputText @bind-Value="BlazorStockToUpdate.Name" class="form-control form-check-inline" style="width: 20%" placeholder="Název skladu" id="title" />
                <ValidationMessage For="@( () => BlazorStockToUpdate.Name)" />

                <InputText @bind-Value="BlazorStockToUpdate.Location" class="form-control form-check-inline" style="width: 20%" placeholder="Lokace skladu" id="location" />
                <ValidationMessage For="@( () => BlazorStockToUpdate.Location)" />

                <InputText @bind-Value="BlazorStockToUpdate.Description" class="form-control form-check-inline" style="width: 20%" placeholder="Stručný popis skladu" id="description" />
                <ValidationMessage For="@( () => BlazorStockToUpdate.Description)" />

                <label class="form-check-label" for="isActive">Aktivní</label>
                <InputCheckbox class="form-check form-check-inline" id="isActive" @bind-Value="BlazorStockToUpdate.IsActive"></InputCheckbox>
            </div>


            <button type="submit" class="btn btn-warning">Ulož záznam</button>


        </EditForm>
    </div>
    
}



@code {
    [SupplyParameterFromForm]
    private BlazorStock NewBlazorStock { get; set; } = new BlazorStock();

    private BlazorStock BlazorStockToUpdate { get; set; } = new();

    private List<BlazorStock> blazorStocksInDb = new List<BlazorStock>();

    private string? notification = null;
    private string? exceptionMessage = null;

    protected override async Task OnInitializedAsync()
    {
        List<Stock> stocksInDb = new List<Stock>();
        try
        {
            stocksInDb = await stockService.GetStocksFromDaoAsync();
            blazorStocksInDb = stocksInDb.Select(stock => StockMapper.MapStock(stock)).OrderBy(stock=> stock.Name).ToList();
        }
        catch(Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o skladech z databáze. ";
        }
    }

    private async Task AddStockAsync()
    {
        if(NewBlazorStock is null)
        {
            return;
        }
        try
        {
            NewBlazorStock.IsActive = true;
            Stock newStock = new Stock();
            newStock = StockMapper.MapStock(NewBlazorStock);

            await stockService.AddStockAsync(newStock);

            notification = "Vloženo ";
            StateHasChanged();
            await Task.Delay(1300);

            RefreshPage();
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";
        }

    }


    private void PrepareUpdateForm(BlazorStock stock)
    {
        BlazorStockToUpdate = stock.CopyBlazorStock();
    }

    private void UpdateStockAsync()
    {
        if (string.IsNullOrEmpty(BlazorStockToUpdate.Name)) 
        {
            return;
        }

        try 
        {
            Stock stockToUpdate = StockMapper.MapStock(BlazorStockToUpdate);

            stockService.UpdateStockAsync(stockToUpdate);

            notification = "Záznam byl upraven";
            StateHasChanged();
            Task.Delay(1300);

            RefreshPage();
        }
        catch(Exception ex)
        {
            notification = "Záznam se nepodařilo upravit.";
            exceptionMessage = ex.Message;
        }  

    }


    private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }

}  