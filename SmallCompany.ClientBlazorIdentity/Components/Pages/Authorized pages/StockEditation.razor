@page "/stockEditation"

@attribute [Authorize];

@inject IStockService stockService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer


<PageTitle>Stock editation</PageTitle>

<h1>Vytvoř nový sklad</h1>
<h5>Vyplň název skladu, stručný popis a lokaci.</h5>

@if (notification != null)
{
    if (exceptionMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @notification: @exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}

<EditForm Model="NewBlazorStock" OnValidSubmit="AddStockAsync" FormName="StockEditation">
    <DataAnnotationsValidator/>
    <table class="table">
        <tbody>
            <tr>
                <InputText @bind-Value="NewBlazorStock.Name" class="form-control" placeholder="Název skladu" id="title" />
                <ValidationMessage For="@( () => NewBlazorStock.Name)"/>
            </tr>
            <tr>
                <InputText @bind-Value="NewBlazorStock.Location" class="form-control" placeholder="Lokace skladu" id="location" />
                <ValidationMessage For="@( () => NewBlazorStock.Location)"/>
            </tr>
            <tr>
                <InputText @bind-Value="NewBlazorStock.Description" class="form-control" placeholder="Stručný popis skladu" id="description" />
                <ValidationMessage For="@( () => NewBlazorStock.Description)" />
            </tr>
        </tbody>
    </table>

    <button type="submit" class="btn btn-primary">Ulož záznam</button>

</EditForm>

<hr class="my-4">
<h5>Níže je vypsán seznam všech již vytvořených skladů.</h5>

@foreach (var stock in blazorStocksInDb)
{
    <div>
        <p class="btn btn-outline-primary">@stock.Id</p>
        <p class="btn btn-outline-primary">@stock.Name</p>
        <p class="btn btn-outline-primary">@stock.Location</p>
        <p class="btn btn-outline-primary">@stock.Description</p>
    </div>
}




@code {
    [SupplyParameterFromForm]
    private BlazorStock NewBlazorStock { get; set; } = new BlazorStock();

    private List<BlazorStock> blazorStocksInDb = new List<BlazorStock>();

    private string? notification = null;
    private string? exceptionMessage = null;

    protected override async Task OnInitializedAsync()
    {
        List<Stock> stocksInDb = new List<Stock>();
        try
        {
            stocksInDb = await stockService.GetStocksFromDaoAsync();
            blazorStocksInDb = stocksInDb.Select(stock => StockMapper.MapStock(stock)).OrderBy(stock=> stock.Name).ToList();
        }
        catch(Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o skladech z databáze. ";
        }
    }

    private async Task AddStockAsync()
    {
        if(NewBlazorStock is null)
        {
            return;
        }
        try
        {
            Stock newStock = new Stock();
            newStock = StockMapper.MapStock(NewBlazorStock);

            await stockService.AddStockAsync(newStock);

            notification = "Vloženo ";
            StateHasChanged();
            await Task.Delay(1300);
            
            RefreshPage();
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";
        }
        
        

    }


    private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }

}  