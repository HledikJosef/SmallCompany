@page "/stockEditation"

@attribute [Authorize];

@inject IStockService stockService;
@inject NavigationManager navigationManager;

<PageTitle>Stock-record</PageTitle>

<h1>Vytvoř nový sklad</h1>
<h5>Vyplň název skladu, stručný popis a lokaci.</h5>

<EditForm Model="NewBlazorStock" OnValidSubmit="AddStock" FormName="StockEditation">
    <table class="table">
        <tbody>
            <tr>
                <td>
                    <InputText @bind-Value="NewBlazorStock.Name" class="form-control" placeholder="Název skladu" id="title" required />
                </td>
            </tr>
            <tr>
                <td>
                    <InputText @bind-Value="NewBlazorStock.Location" class="form-control" placeholder="Lokace skladu" id="location" required />
                </td>
            </tr>
            <tr>
                <td>
                    <InputText @bind-Value="NewBlazorStock.Description" class="form-control" placeholder="Stručný popis skladu" id="description" required />
                </td>

            </tr>
        </tbody>
    </table>

    <button type="submit" class="btn btn-primary">Ulož záznam</button>

</EditForm>

<hr class="my-4">
<h5>Níže je vypsán seznam všech již vytvořených skladů.</h5>
<table class"table">
    <tbody>
        @foreach (var stock in blazorStocksInDb)
        {
            <tr>
                <td>@stock.Id</td>;
                <td>@stock.Name</td>
                <td>@stock.Location</td>
                <td>@stock.Description</td>
            </tr>
        }
    </tbody>
</table>

@if (notification != null)
{
    if (exceptionMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @notification: @exceptionMessage
        </div>

    }
    else
    {
        <div class="alert alert-success" role="alert">
            @notification
        </div>
    }

}


@code {
    [SupplyParameterFromForm]
    private BlazorStock NewBlazorStock { get; set; } = new BlazorStock();

    private List<BlazorStock> blazorStocksInDb = new List<BlazorStock>();

    private string? notification = null;
    private string? exceptionMessage = null;

    protected override async Task OnInitializedAsync()
    {
        NewBlazorStock = new();
        List<ServiceStock> serviceStockinDb = new List<ServiceStock>();
        try
        {
            serviceStockinDb = await stockService.GetStocksFromDao();
            blazorStocksInDb = serviceStockinDb.Select(stock => StockMapper.MappServiceBlazorStock(stock)).ToList();
        }
        catch(Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Nepodařilo se načíst data o skladech z databáze. ";
        }
    }

    private async Task AddStock()
    {
        if(NewBlazorStock is null)
        {
            throw new InvalidOperationException();
        }
        try
        {
            ServiceStock serviceStock = new ServiceStock();
            serviceStock = StockMapper.MappBlazorServisStock(NewBlazorStock);

            await stockService.AddStock(serviceStock);

            notification = "Vloženo ";
            await Task.Delay(1300);
            RefreshPage();
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            notification = "Záznam se nepodařilo uložit ";
        }

    }


    private void RefreshPage()
    {
        navigationManager.NavigateTo("/stockRecord", forceLoad: true);
    }

}  