@page "/propertyEditation"
@attribute [Authorize]

@inject IPropertyService propertyService;
@inject IDateTypeService dateTypeService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer

<h1>Editace vlastností skladových položek.</h1>
<h5>Vytvořte záznam vlastnosti položky (např.výška, hmotnost, barva, atd.).
	Tyto vlastnosti se párují ke skladovaným položkám. Dodržujte formát : název vlastnosti(jednotka vlastnosti). Např. "Hmotnost(kg)"
</h5>

@if (!string.IsNullOrWhiteSpace(notification))
{
	if (!string.IsNullOrWhiteSpace(exceptionMessage))
	{
		<div class="alert alert-danger" role="alert">
			@notification: <br>@exceptionMessage
		</div>

	}
	else
	{
		<div class="alert alert-success" role="alert">
			@notification
		</div>
	}

}

<div>
	<EditForm Model="NewBlazorProperty" OnValidSubmit="AddPropertyAsync" FormName="propertyEditation">
		<DataAnnotationsValidator />
		<table class="table">
			<tr>
				<td>
					<InputText class="form-control" @bind-Value="NewBlazorProperty.Name" id="propertyName" placeholder="Název vlastnosti(jednotka)" />
					<ValidationMessage For="@(() => NewBlazorProperty.Name)" />
				</td>
				<td>
					<InputSelect class="form-select" @bind-Value="NewBlazorProperty.BlazorDateTypeId" id="dateTypeId">
						<option disabled selected value="0">Vyber typ vlastnosti.</option>
						@foreach (var dateType in BlazorDateTypesInDb)
						{
							<option value="@dateType.Id">@dateType.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="@( () => NewBlazorProperty.BlazorDateTypeId)" />
				</td>

			</tr>
		</table>

		<button type="submit" class="btn btn-primary">Ulož záznam</button>

	</EditForm>
</div>


<hr class="my-4" style="visibility: hidden">
<h5>Níže je vypsán seznam všech již vytvořených vlastností.</h5>


@foreach(var prop in blazorPropertiesInDb)
{
	var dateType = BlazorDateTypesInDb.FirstOrDefault(dt => dt.Id == prop.BlazorDateTypeId);

	<div>
		<button class="btn btn-outline-primary" title="Upravit záznam" @onclick="()=>PrepareUpdateForm(prop)" >@prop.Name  -@dateType?.Name  -aktivní:@prop.IsActive</button>
	</div>
}

<hr class="my-1" style="visibility: hidden">

@if(!string.IsNullOrEmpty(blazorPropertyToUpdate.Name))
{
	var dateType = BlazorDateTypesInDb.FirstOrDefault(d => d.Id == blazorPropertyToUpdate.BlazorDateTypeId);
	<div>
		<EditForm class="form-control" Model="blazorPropertyToUpdate" OnValidSubmit="UpdatePropertyAsync" FormName="propertyUpdate">
			<DataAnnotationsValidator />
			<div>
				<InputText class="form-control form-check-inline" style="width: 20%" @bind-Value="blazorPropertyToUpdate.Name" id="propertyNameUpdate" width="50%"></InputText>
				<ValidationMessage For="@(() => blazorPropertyToUpdate.Name)" />
				<InputSelect class="form-select form-check-inline" style="width: 20%" @bind-Value="blazorPropertyToUpdate.BlazorDateTypeId" id="dateTypeUpdate">
					@foreach (var dateType in BlazorDateTypesInDb)
					{
						<option value="@dateType.Id">@dateType.Name</option>
					}
				</InputSelect>
				<label class="form-check-label" for="isActive">Aktivní</label>
				<InputCheckbox class="form-check form-check-inline" @bind-Value="blazorPropertyToUpdate.IsActive" id="isActive"></InputCheckbox>

			</div>

			<button type="submit" class="btn btn-warning">Uprav záznam</button>
		</EditForm>
	</div>
	

}


@code {

	[SupplyParameterFromForm]
	BlazorProperty NewBlazorProperty { get; set; } = new BlazorProperty();

	BlazorProperty blazorPropertyToUpdate = new BlazorProperty();

	List<BlazorDateType> BlazorDateTypesInDb { get; set; } = new List<BlazorDateType>();
	List<BlazorProperty> blazorPropertiesInDb = new List<BlazorProperty>();
	private string? notification;
	private string? exceptionMessage;

	protected override async Task OnInitializedAsync()
	{
		List<DateType> dateTypesInDb = new();
		List<Property> propertiesInDb = new();

		try
		{
			dateTypesInDb = await dateTypeService.GetDateTypesFromDaoAsync();
			BlazorDateTypesInDb = dateTypesInDb.Select(dateType => DateTypeMapper.MapDateType(dateType)).OrderBy(dateType => dateType.Name).ToList();
			propertiesInDb = await propertyService.GetPropertiesFromDaoAsync();
			blazorPropertiesInDb = propertiesInDb.Select(prop => PropertyMapper.MapProperty(prop)).OrderBy(prop => prop.Name).ToList();
		}
		catch(Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Nepodařilo se načíst data o měrných jednotkách z databáze. ";
		}
	}

	private async Task AddPropertyAsync()
	{
		if((string.IsNullOrEmpty(NewBlazorProperty.Name)) || (NewBlazorProperty.BlazorDateTypeId == 0))
		{
			throw new InvalidOperationException();			
		}

		try
		{
			NewBlazorProperty.IsActive = true;
			Property newProperty = new Property();
			newProperty = PropertyMapper.MapProperty(NewBlazorProperty);

			await propertyService.AddPropertyAsync(newProperty);

			notification = "Uloženo";
			StateHasChanged();
			await Task.Delay(1300);

			RefreshPage();
		}
		catch(Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Záznam se nepodařilo uložit ";
		}



	}

	private void PrepareUpdateForm(BlazorProperty property)
	{
		blazorPropertyToUpdate = property.CopyProperty();
	}

	private async Task UpdatePropertyAsync() 
	{
		if(string.IsNullOrEmpty(blazorPropertyToUpdate.Name))
		{
			return;
		}

		try 
		{
			Property propertyToUpdate = PropertyMapper.MapProperty(blazorPropertyToUpdate);

			await propertyService.UpdatePropertyAsync(propertyToUpdate);

			notification = "Záznam byl upraven";
			StateHasChanged();
			await Task.Delay(1300);


			RefreshPage();
		}
		catch(Exception ex)
		{
			notification = "Záznam se nepodařilo uložit.";
			exceptionMessage = ex.Message;
		}
	}


	private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri,true);
    }



}
