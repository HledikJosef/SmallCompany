@page "/propertyEditation"
@attribute [Authorize]

@inject IPropertyService propertyService;
@inject IDateTypeService dateTypeService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer

<h1>Editace vlastností skladových položek.</h1>
<h5>Vytvořte záznam vlastnosti položky (např.výška, hmotnost, barva, atd.).
	Tyto vlastnosti se párují ke skladovaným položkám. Dodržujte formát : název vlastnosti(jednotka vlastnosti). Např. "Hmotnost(kg)"
</h5>

@if (notification != null)
{
	if (exceptionMessage != null)
	{
		<div class="alert alert-danger" role="alert">
			@notification: @exceptionMessage
		</div>

	}
	else
	{
		<div class="alert alert-success" role="alert">
			@notification
		</div>
	}

}

<EditForm Model="NewBlazorProperty" OnValidSubmit="AddPropertyAsync" FormName="propertyEditation">
	<DataAnnotationsValidator/>
	<table class="table">
		<tr>
			<td>
				<InputText class="form-control" @bind-Value="NewBlazorProperty.Name" id="propertyName" placeholder="Název vlastnosti(jednotka)"/>
				<ValidationMessage For="@(() => NewBlazorProperty.Name)"/>
			</td>
			<td>
				<InputSelect class="form-select" @bind-Value="NewBlazorProperty.BlazorDateTypeId" id="dateTypeId">
					<option disabled selected value="0">Vyber typ vlastnosti.</option>
					@foreach(var dateType in BlazorDateTypesInDb)
					{
						<option value="@dateType.Id">@dateType.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="@( () => NewBlazorProperty.BlazorDateTypeId)"/>
			</td>
			
		</tr>
	</table>

	<button type="submit" class="btn btn-primary">Ulož záznam</button>

</EditForm>

<hr class="my-4">
<h5>Níže je vypsán seznam všech již vytvořených vlastností.</h5>
@foreach(var prop in blazorPropertiesInDb)
{
	var dateType = BlazorDateTypesInDb.FirstOrDefault(dt => dt.Id == prop.BlazorDateTypeId);

	<p>
		<button class="btn btn-outline-primary">@prop.Name</button>
		<button class="btn btn-outline-primary">@dateType?.Name</button>
	</p>
}


@code {

	[SupplyParameterFromForm]
	BlazorProperty NewBlazorProperty { get; set; } = new BlazorProperty();

	List<BlazorDateType> BlazorDateTypesInDb { get; set; } = new List<BlazorDateType>();
	List<BlazorProperty> blazorPropertiesInDb = new List<BlazorProperty>();
	private string? notification;
	private string? exceptionMessage;

	protected override async Task OnInitializedAsync()
	{
		List<ServiceDateType> serviceDateTypesInDb = new();
		List<ServiceProperty> servicePropertiesInDb = new();

		try
		{
			serviceDateTypesInDb = await dateTypeService.GetDateTypesFromDaoAsync();
			BlazorDateTypesInDb = serviceDateTypesInDb.Select(dateType => DateTypeMapper.MapServiceBlazorDateType(dateType)).OrderBy(dateType => dateType.Name).ToList();
			servicePropertiesInDb = await propertyService.GetPropertiesFromDaoAsync();
			blazorPropertiesInDb = servicePropertiesInDb.Select(prop => PropertyMapper.MapServiceBlazorProperty(prop)).OrderBy(prop => prop.Name).ToList();
		}
		catch(Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Nepodařilo se načíst data o měrných jednotkách z databáze. ";
		}
	}

	private async Task AddPropertyAsync()
	{
		if((string.IsNullOrEmpty(NewBlazorProperty.Name)) || (NewBlazorProperty.BlazorDateTypeId == 0))
		{
			throw new InvalidOperationException();			
		}

		try
		{
			ServiceProperty serviceProperty = new ServiceProperty();
			serviceProperty = PropertyMapper.MapBlazorServicePorperty(NewBlazorProperty);

			await propertyService.AddPropertyAsync(serviceProperty);

			notification = "Uloženo";
			StateHasChanged();
			await Task.Delay(1300);

			RefreshPage();
		}
		catch(Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Záznam se nepodařilo uložit ";
		}

		

	}

	private void RefreshPage()
    {
        navigationManager.NavigateTo(navigationManager.Uri,true);
    }



}
