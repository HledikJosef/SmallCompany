@page "/itemEditation"

@attribute [Authorize];

@inject ITypeOfItemService typeOfItemService;
@inject IUnitService unitService;	
@inject IStockService stockService;
@inject IPropertyService propertyService;
@inject IItemService itemService;
@inject IDateTypeService dateTypeService;
@inject NavigationManager navigationManager;
@inject NavigationDataService navigationDataService;
@rendermode InteractiveServer


<PageTitle>Item editation</PageTitle>

<h1>Vytvoř skladovou položku</h1>
<h5>Zvol skupinu a vyplň požadované vlastnosti. Všechny vlastnosti jsou volitelné. </h5>


@if (!string.IsNullOrWhiteSpace(notification))
{
	if (!string.IsNullOrWhiteSpace(exceptionMessage))
	{
		<div class="alert alert-danger" role="alert">
			@notification <br>@exceptionMessage
		</div>

	}
	else
	{
		<div class="alert alert-success" role="alert">
			@notification
		</div>
	}

}

<div>
	<EditForm Model="NewBlazorItem" OnValidSubmit="AddItemAsync" FormName="itemEditation">
		<DataAnnotationsValidator />
		<table class="table">
			<tr>
				<td>
					<InputSelect class="form-select" id="typeOfItem" @bind-Value="NewBlazorItem.TypeOfItemId">
						<option disabled selected value="0">Vyber druh položky</option>
						@foreach (var type in BlazorTypesOfItemInDb)
						{
							<option value="@type.Id">@type.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="@( () => NewBlazorItem.TypeOfItemId)" />
				</td>
				<td>
					<InputText class="form-control" id="itemName" @bind-Value="NewBlazorItem.Name" placeholder="Název položky" />
					<ValidationMessage For="@( () => NewBlazorItem.Name)" />
				</td>
				<td>
					<InputSelect class="form-select" id="itemUnit" @bind-Value="NewBlazorItem.UnitId">
						<option disabled selected value="0">Vyber měrnou jednotku</option>

						@foreach (var unit in BlazorUnitsInDb)
						{
							<option value="@unit.Id">@unit.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="@( () => NewBlazorItem.UnitId)" />
				</td>
			</tr>
		</table>

		@if (!string.IsNullOrWhiteSpace(NewBlazorItem.BlazorItemPropertiesValidationMessage))
		{
			<div class="text-danger">
				@NewBlazorItem.BlazorItemPropertiesValidationMessage
			</div>
		}


		@if (NewBlazorItem.BlazorItemProperties.Count != 0)
		{
			@foreach (var prop in NewBlazorItem.BlazorItemProperties)
			{
				<p>
					<label for="itemProperty">@prop.Name</label>
					<InputText class="form-control" id="itemProperty" @bind-Value="prop.Value"></InputText>					

				</p>
			}
		}
		<button Type="submit" class="btn btn-primary">Ulož záznam</button>
	</EditForm>
</div>



@if (BlazorItemsInDb.Count != 0) 
{

	@foreach (var it in BlazorItemsInDb) 
	{
		string propertyName="";
		string properties = "";
		@foreach (var ipv in it.BlazorItemPropertyValues)
		{
			propertyName = ipv.BlazorProperty.Name;
			properties += $"{propertyName}: {ipv.Value}, ";
		}
		<button class="btn btn-outline-primary" @onclick="()=>NavigateToUpdatePage(it)">@it.Id, @it.BlazorTypeOfItem.Name, @it.Name, @it.BlazorUnit.Name, Aktivní:@it.IsActive, @properties</button>	
	}
}









@code {

	[SupplyParameterFromForm]
	private BlazorItemNew NewBlazorItem { get; set; } = new BlazorItemNew();

	private List<BlazorDateType> BlazorDateTypesIndDb { get; set; } = new List<BlazorDateType>();
	private List<BlazorUnit> BlazorUnitsInDb { get; set; } = new List<BlazorUnit>();
	private List<BlazorTypeOfItem> BlazorTypesOfItemInDb { get; set; } = new List<BlazorTypeOfItem>();
	private List<BlazorProperty> BlazorPropertiesInDb { get; set; } = new List<BlazorProperty>();

	private List<BlazorItemNew> BlazorItemsInDb { get; set; } = new List<BlazorItemNew>();

	BlazorItemNew existingBlazorItem = new BlazorItemNew();

	private string? notification;
	private string? exceptionMessage;

	protected override async Task OnInitializedAsync()
	{
		List<DateType> dateTypesInDb = new();
		List<TypeOfItem> typesOfItemsInDb = new();
		List<Unit> unitsInDb = new();
		List<Property> propertiesInDb = new();
		List<Item> itemsInDb = new();

		try
		{
			dateTypesInDb = await dateTypeService.GetDateTypesFromDaoAsync();
			NewBlazorItem.BlazorDateTypes = dateTypesInDb.Select(dt => DateTypeMapper.MapDateType(dt)).ToList();

			typesOfItemsInDb = await typeOfItemService.GetTypesOfItemsFromDaoAsync();			
			BlazorTypesOfItemInDb = typesOfItemsInDb.Select(type => TypeOfItemMapper.MapTypeOfItem(type)).OrderBy(type => type.Name).ToList();

			unitsInDb = await unitService.GetUnitsFromDaoAsync();
			BlazorUnitsInDb = unitsInDb.Select(unit => UnitMapper.MapUnit(unit)).OrderBy(unit => unit.Name).ToList();

			itemsInDb = await itemService.GetItemsFromDaoAsync();
			BlazorItemsInDb = itemsInDb.Select(i => ItemMapper.MapItem(i)).ToList();

			propertiesInDb = await propertyService.GetPropertiesFromDaoAsync();
			BlazorPropertiesInDb = propertiesInDb.Select(prop => PropertyMapper.MapProperty(prop)).OrderBy(prop=>prop.Name).ToList();
			NewBlazorItem.BlazorItemProperties = propertiesInDb.Select(prop => PropertyMapper.MapProperty(prop)).OrderBy(prop => prop.Name).ToList();

		}
		catch(Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Nepodařilo se načíst podklady z databáze. ";
		}

	}


	private async Task AddItemAsync()
	{
		try
		{
			notification = "";
			exceptionMessage = "";
			existingBlazorItem = new();

			NewBlazorItem.IsActive = true;

			Item newItem = new Item();
			newItem = ItemMapper.MapItem(NewBlazorItem);
			newItem.ItemPropertyValues = NewBlazorItem.BlazorItemProperties.Select( prop => ItemPropertyValueMapper.MapItemPropValue(prop)).ToList();

			await CheckItemDuplicityAsync(newItem);

			if (existingBlazorItem.Id == 0)
			{
				await itemService.AddItemWithPropertiesAsync(newItem);


				notification = "Vloženo.";
				StateHasChanged();
				await Task.Delay(1300);

				RefreshPage();

			}

		}
		catch (Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Záznam se nepodařilo uložit ";
			StateHasChanged();
		}

	}


	private void NavigateToUpdatePage(BlazorItemNew blazorItem)
	{
		navigationDataService.SharedBlazorItem = blazorItem;
		// navigationDataService.BlazorPropertiesInDb = BlazorPropertiesInDb;
		navigationDataService.BlazorUnitsInDb = BlazorUnitsInDb;
		navigationDataService.BlazorTypesOfItemInDb = BlazorTypesOfItemInDb;

		navigationManager.NavigateTo("/updatePage");
	}


	private async Task CheckItemDuplicityAsync(Item item)
	{
		Item? existingItem = await itemService.CheckItemDuplicityAsync(item);

		notification = "";

		if(existingItem != null)
		{
			existingBlazorItem = ItemMapper.MapItem(existingItem);

			notification = $"Tento záznam již existuje: {existingBlazorItem.Id}.. {existingBlazorItem.Name}";
			exceptionMessage = "Parametry můžete upravit a opět zkusit uložit .";
		}
	}
	

	private void RefreshPage()
	{
		navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
	}

}
