@page "/itemEditation"

@attribute [Authorize];

@inject ITypeOfItemService typeOfItemService;
@inject IUnitService unitService;	
@inject IStockService stockService;
@inject IPropertyService propertyService;
@inject IItemService itemService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer


<PageTitle>Item editation</PageTitle>

<h1>Vytvoř skladovou položku</h1>
<h5>Zvol skupinu a vyplň požadované vlastnosti. Všechny vlastnosti jsou volitelné. </h5>

@if (!string.IsNullOrWhiteSpace(notification))
{
	if (!string.IsNullOrWhiteSpace(exceptionMessage))
	{
		<div class="alert alert-danger" role="alert">
			@notification <br>@exceptionMessage
		</div>

	}
	else
	{
		<div class="alert alert-success" role="alert">
			@notification
		</div>
	}

}

<div>
	<EditForm Model="NewBlazorItemModel" OnValidSubmit="AddItemAsync" FormName="itemEditation">
		<DataAnnotationsValidator />
		<table class="table">
			<tr>
				<td>
					<InputSelect class="form-select" id="typeOfItem" @bind-Value="NewBlazorItemModel.TypeOfItemId">
						<option disabled selected value="0">Vyber druh položky</option>
						@foreach (var type in BlazorTypesOfItemInDb)
						{
							<option value="@type.Id">@type.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="@( () => NewBlazorItemModel.TypeOfItemId)" />
				</td>
				<td>
					<InputText class="form-control" id="itemName" @bind-Value="NewBlazorItemModel.Name" placeholder="Název položky" />
					<ValidationMessage For="@( () => NewBlazorItemModel.Name)" />
				</td>
				<td>
					<InputSelect class="form-select" id="itemUnit" @bind-Value="NewBlazorItemModel.UnitId">
						<option disabled selected value="0">Vyber měrnou jednotku</option>

						@foreach (var unit in BlazorUnitsInDb)
						{
							<option value="@unit.Id">@unit.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="@( () => NewBlazorItemModel.UnitId)" />
				</td>
			</tr>
		</table>


		@if (BlazorPropertiesInDb != null)
		{
			@foreach (var prop in NewBlazorItemModel.BlazorItemProperties)
			{
				<p>
					<label for="itemProperty">@prop.Name</label>
					<InputText class="form-control" id="itemProperty" @bind-Value="prop.Value"></InputText>
				</p>
			}
		}
		<button Type="submit" class="btn btn-primary">Ulož záznam</button>
	</EditForm>
</div>










@code {

	[SupplyParameterFromForm]
	private BlazorItem NewBlazorItemModel { get; set; } = new BlazorItem();


	private List<BlazorUnit> BlazorUnitsInDb { get; set; } = new List<BlazorUnit>();
	private List<BlazorTypeOfItem> BlazorTypesOfItemInDb { get; set; } = new List<BlazorTypeOfItem>();
	private List<BlazorProperty> BlazorPropertiesInDb { get; set; } = new List<BlazorProperty>();
	List<BlazorItem> existingBlazorItems = new List<BlazorItem>();
	private string? notification;
	private string? exceptionMessage;

	protected override async Task OnInitializedAsync()
	{
		List<TypeOfItem> typesOfItemsInDb = new();
		List<Unit> unitsInDb = new();
		List<Property> propertiesInDb = new();

		try
		{
			typesOfItemsInDb = await typeOfItemService.GetTypesOfItemsFromDaoAsync();
			BlazorTypesOfItemInDb = typesOfItemsInDb.Select(type => TypeOfItemMapper.MapTypeOfItem(type)).OrderBy(type => type.Name).ToList();
			unitsInDb = await unitService.GetUnitsFromDaoAsync();
			BlazorUnitsInDb = unitsInDb.Select(unit => UnitMapper.MapUnit(unit)).OrderBy(unit => unit.Name).ToList();
			propertiesInDb = await propertyService.GetPropertiesFromDaoAsync();
			NewBlazorItemModel.BlazorItemProperties = propertiesInDb.Select(prop => PropertyMapper.MapProperty(prop)).OrderBy(prop => prop.Name).ToList();

		}
		catch(Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Nepodařilo se načíst podklady z databáze. ";
		}

	}


	private async Task AddItemAsync()
	{
		try
		{
			notification = "";
			exceptionMessage = "";
			existingBlazorItems = new();

			RemoveUnusedProperties(NewBlazorItemModel.BlazorItemProperties);

			ModifyProperty(NewBlazorItemModel.BlazorItemProperties);

			Item newItem = new Item();
			newItem = ItemMapper .MapItem(NewBlazorItemModel);
			newItem.ItemPropertyValues = NewBlazorItemModel.BlazorItemProperties.Select( prop => ItemPropertyValueMapper.MapItemPropValue(prop)).ToList();

			await CheckItemDuplicityAsync(newItem);

			if (existingBlazorItems.Count == 0)
			{
				await itemService.AddItemWithPropertiesAsync(newItem);


				notification = "Vloženo.";
				StateHasChanged();
				await Task.Delay(1300);

				RefreshPage();

			}

		}
		catch (Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Záznam se nepodařilo uložit ";
			StateHasChanged();
		}



	}

	private async Task CheckItemDuplicityAsync(Item item)
	{
		List<Item> existingItems = new();	
		existingItems = await itemService.CheckItemDuplicityAsync(item);

		notification = "";

		if(existingItems.Count != 0)
		{
			existingBlazorItems = existingItems.Select(item => ItemMapper.MapItem(item)).ToList();

			string idOutput = "";
			foreach (var it in existingBlazorItems) 
			{
				idOutput += $"ID {it.Id} {it.Name}   ";
			}

			notification = $"Tento záznam již existuje: {idOutput}  ";
			exceptionMessage = "Parametry můžete upravit a opět zkusit uložit .";
		}
	}


	private void RemoveUnusedProperties(List<BlazorProperty> properties)
	{
		properties.RemoveAll(property => string.IsNullOrWhiteSpace(property.Value));
	}


	private void ModifyProperty(List<BlazorProperty> properties)
	{
		foreach(var prop in properties)
		{
			prop.Value.ToLower();

			if(float.TryParse(prop.Value,NumberStyles.Any,CultureInfo.InvariantCulture, out float parsedFloatValue)) 
			{
				string value = prop.Value.Replace('.',',');
				prop.Value = value;
			}
		}
	}


	private void RefreshPage()
	{
		navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
	}

}
