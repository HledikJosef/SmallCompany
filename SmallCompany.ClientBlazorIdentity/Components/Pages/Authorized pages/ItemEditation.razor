@page "/itemEditation"

@attribute [Authorize];

@inject ITypeOfItemService typeOfItemService;
@inject IUnitService unitService;	
@inject IStockService stockService;
@inject IPropertyService propertyService;
@inject IItemService itemService;
@inject NavigationManager navigationManager;
@rendermode InteractiveServer


<PageTitle>Item editation</PageTitle>

<h1>Vytvoř skladovou položku</h1>
<h5>Zvol skupinu a vyplň požadované parametry</h5>

@if (!string.IsNullOrEmpty(notification))
{
	if (!string.IsNullOrEmpty(exceptionMessage))
	{
		<div class="alert alert-danger" role="alert">
			@notification @exceptionMessage
		</div>

	}
	else
	{
		<div class="alert alert-success" role="alert">
			@notification
		</div>
	}

}

<EditForm Model="BlazorItemModel" OnValidSubmit="AddItemAsync" FormName="itemEditation">
	<DataAnnotationsValidator />
	<table class="table">
		<tr>
			<td>
				<InputSelect class="form-select" id="typeOfItem" @bind-Value="BlazorItemModel.TypeOfItemId">
					<option disabled selected value="0">Vyber druh položky</option>
					@foreach (var type in BlazorTypesOfItemInDb)
					{
						<option value="@type.Id">@type.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="@( () => BlazorItemModel.TypeOfItemId)" />
			</td>
			<td>
				<InputText class="form-control" id="itemName" @bind-Value="BlazorItemModel.Name" placeholder="Název položky" />
				<ValidationMessage For="@( () => BlazorItemModel.Name)" />
			</td>
			<td>
				<InputSelect class="form-select" id="itemUnit" @bind-Value="BlazorItemModel.UnitId">					
					<option disabled selected value="0">Vyber měrnou jednotku</option>

					@foreach (var unit in BlazorUnitsInDb)
					{
						<option value="@unit.Id">@unit.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="@( () => BlazorItemModel.UnitId)" />
			</td>
		</tr>
	</table>


	@if (BlazorPropertiesInDb != null)
	{
		@foreach (var prop in BlazorItemModel.BlazorItemProperties)
		{
			<p>
				<label for="itemProperty">@prop.Name</label>
				<InputText class="form-control" id="itemProperty" @bind-Value="prop.Value"></InputText>
			</p>
		}
	}
	<button Type="submit" class="btn btn-primary">Ulož záznam</button>
</EditForm>	








@code {

	[SupplyParameterFromForm]
	private BlazorItem BlazorItemModel { get; set; } = new BlazorItem();


	private List<BlazorUnit> BlazorUnitsInDb { get; set; } = new List<BlazorUnit>();
	private List<BlazorTypeOfItem> BlazorTypesOfItemInDb { get; set; } = new List<BlazorTypeOfItem>();
	private List<BlazorProperty> BlazorPropertiesInDb { get; set; } = new List<BlazorProperty>();
	List<int> existingItems = new List<int>();
	private string? notification;
	private string? exceptionMessage;

	protected override async Task OnInitializedAsync()
	{
		List<ServiceTypeOfItem> serviceTypesOfItemInDb = new List<ServiceTypeOfItem>();
		List<ServiceUnit> serviceUnitsInDb = new List<ServiceUnit>();
		List<ServiceProperty> servicePropertiesInDb = new List<ServiceProperty>();

		try
		{
			BlazorItemModel.BlazorItemProperties = new List<BlazorProperty>();
			serviceTypesOfItemInDb = await typeOfItemService.GetTypesOfItemsFromDaoAsync();
			BlazorTypesOfItemInDb = serviceTypesOfItemInDb.Select(type => TypeOfItemMapper.MapServiceBlazorTypeOfItem(type)).OrderBy(type => type.Name).ToList();
			serviceUnitsInDb = await unitService.GetUnitsFromDaoAsync();
			BlazorUnitsInDb = serviceUnitsInDb.Select(unit => UnitMapper.MapServiceBlazorUnit(unit)).OrderBy(unit => unit.Name).ToList();
			servicePropertiesInDb = await propertyService.GetPropertiesFromDaoAsync();
			BlazorItemModel.BlazorItemProperties = servicePropertiesInDb.Select(prop => PropertyMapper.MapServiceBlazorProperty(prop)).OrderBy(prop => prop.Name).ToList();

		}
		catch(Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Nepodařilo se načíst podklady z databáze. ";
		}

	}


	private async Task AddItemAsync()
	{
		try
		{
			exceptionMessage = "";

			RemoveUnusedProperties(BlazorItemModel.BlazorItemProperties);

			ModifyFloatProperty(BlazorItemModel.BlazorItemProperties);

			ServiceItem serviceItem = new ServiceItem();
			serviceItem = ItemMapper.MapBlazorServiceItem(BlazorItemModel);
			serviceItem.ServiceItemPropertyValues = BlazorItemModel.BlazorItemProperties.Select( prop => ItemPropertyValueMapper.MapBlazorServiceItemPropValue(prop)).ToList();

			await CheckItemDuplicityAsync(serviceItem);

			if (existingItems.Count == 0 )
			{
				await itemService.AddItemWithPropertiesAsync(serviceItem);


				notification = "Vloženo.";
				StateHasChanged();
				await Task.Delay(1300);

				RefreshPage();

			}

		}
		catch (Exception ex)
		{
			exceptionMessage = ex.Message;
			notification = "Záznam se nepodařilo uložit ";
			StateHasChanged();
		}



	}

	private async Task CheckItemDuplicityAsync(ServiceItem serviceItem)
	{
		existingItems = await itemService.CheckItemDuplicityAsync(serviceItem);

		if(existingItems.Count>0)
		{
			notification = "Tento záznam již existuje. ";
			exceptionMessage = "Parametry můžete upravit a opět zkusit uložit .";
		}
	}


	private void RemoveUnusedProperties(List<BlazorProperty> properties)
	{
		properties.RemoveAll(property => string.IsNullOrWhiteSpace(property.Value));
	}


	private void ModifyFloatProperty(List<BlazorProperty> properties)
	{
		foreach(var prop in properties)
		{
			if(float.TryParse(prop.Value,NumberStyles.Any,CultureInfo.InvariantCulture, out float parsedFloatValue)) 
			{
				string value = prop.Value.Replace('.',',');
				prop.Value = value;
			}
		}
	}


	private void RefreshPage()
	{
		navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
	}

}
